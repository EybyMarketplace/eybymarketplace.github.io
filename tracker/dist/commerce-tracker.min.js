(function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.Utils = { throttle: function(func, limit) { let inThrottle; return function() { const args = arguments; const context = this; if (!inThrottle) { func.apply(context, args); inThrottle = true; setTimeout(() => inThrottle = false, limit);} };}, isMobile: function() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);}, isTablet: function() { return /(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(navigator.userAgent);}, getDeviceType: function() { if (this.isMobile()) return 'mobile'; if (this.isTablet()) return 'tablet'; return 'desktop';}, getScrollPercentage: function() { const scrollTop = window.pageYOffset || document.documentElement.scrollTop; const scrollHeight = document.documentElement.scrollHeight - window.innerHeight; return Math.round((scrollTop / scrollHeight) * 100);}, sanitizeString: function(str) { if (typeof str !== 'string') return str; return str .replace(/[<>]/g, '') .replace(/javascript:/gi, '') .replace(/on\w+=/gi, '') .trim();}, deepMerge: function(target, source) { const result = Object.assign({}, target); for (const key in source) { if (source.hasOwnProperty(key)) { if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) { result[key] = this.deepMerge(result[key] || {}, source[key]);} else { result[key] = source[key];} } } return result;}, getCleanPageUrl: function() { let url = window.location.href; try { const webPixelPattern = /\/web-pixels@[^\/]+\/[^\/]+\/web-pixel-[^\/]+@[^\/]+\/sandbox\/modern/; url = url.replace(webPixelPattern, ''); const urlObj = new URL(url); const trackingParams = [ 'pr_prod_strat', 'pr_rec_id', 'pr_rec_pid', 'pr_ref_pid', 'pr_seq', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'fbclid', 'gclid', 'msclkid', '_ga', '_gl' ]; trackingParams.forEach(param => { urlObj.searchParams.delete(param);}); let cleanUrl = `${urlObj.origin}${urlObj.pathname}`; const remainingParams = urlObj.searchParams.toString(); if (remainingParams) { cleanUrl += `?${remainingParams}`;} return cleanUrl;} catch (error) { console.warn('Erro ao limpar URL:', error); return `${window.location.origin}${window.location.pathname}`;} } }; console.log('🔧 Utils module loaded');})(window); (function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.Config = { defaults: { apiEndpoint: '', projectId: '', enableConsentCheck: true, platform: '', batchSize: 10, batchTimeout: 3000, sessionTimeout: 30 * 60 * 1000, version: '2.0.0' }, current: {}, init: function() { this.current = Object.assign({}, this.defaults);}, update: function(options = {}) { Object.assign(this.current, options);}, get: function(key) { return this.current[key];}, getAll: function() { return Object.assign({}, this.current);}, isValid: function() { return !!(this.current.apiEndpoint && this.current.projectId);} }; window.CommerceTracker.Config.init(); console.log('📋 Config module loaded');})(window); (function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.ConsentManager = { CONSENT_KEY: 'analytics_consent', CONSENT_DATE_KEY: 'analytics_consent_date', pendingCallbacks: [], checkConsent: function() { const config = window.CommerceTracker.Config; if (!config.get('enableConsentCheck')) return true; const consent = localStorage.getItem(this.CONSENT_KEY); const consentDate = localStorage.getItem(this.CONSENT_DATE_KEY); if (consent === 'granted' && consentDate) { const oneYearAgo = Date.now() - (365 * 24 * 60 * 60 * 1000); return parseInt(consentDate) > oneYearAgo;} return false;}, waitForConsent: function(callback, timeout = 10000) { if (this.checkConsent()) { callback(); return;} this.pendingCallbacks.push(callback); const startTime = Date.now(); const checkInterval = setInterval(() => { if (this.checkConsent()) { clearInterval(checkInterval); this.triggerPendingCallbacks();} else if (Date.now() - startTime > timeout) { clearInterval(checkInterval); console.warn('Influencer Tracker: Consent timeout reached');} }, 500);}, setConsent: function(granted = true) { localStorage.setItem(this.CONSENT_KEY, granted ? 'granted' : 'denied'); localStorage.setItem(this.CONSENT_DATE_KEY, Date.now().toString()); if (granted) { this.triggerPendingCallbacks();} }, triggerPendingCallbacks: function() { this.pendingCallbacks.forEach(callback => { try { callback();} catch (error) { console.error('Consent callback error:', error);} }); this.pendingCallbacks = [];}, revokeConsent: function() { localStorage.removeItem(this.CONSENT_KEY); localStorage.removeItem(this.CONSENT_DATE_KEY);} }; console.log('🔒 ConsentManager module loaded');})(window); (function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.IdGenerator = { USER_ID_KEY: 'inf_user_id', SESSION_KEY: 'inf_session', getProjectId: function() { const hostname = window.location.hostname; return hostname.replace('.myshopify.com', '').replace(/\./g, '-');}, generateUUID: function() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { const r = Math.random() * 16 | 0; const v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16);});}, getUserId: function() { let userId = localStorage.getItem(this.USER_ID_KEY); if (!userId) { userId = this.generateUUID(); localStorage.setItem(this.USER_ID_KEY, userId);} return userId;}, getSessionId: function() { let sessionData = sessionStorage.getItem(this.SESSION_KEY); const config = window.CommerceTracker.Config; const sessionTimeout = config.get('sessionTimeout'); if (sessionData) { try { const session = JSON.parse(sessionData); const now = Date.now(); if (now - session.lastActivity < sessionTimeout) { session.lastActivity = now; sessionStorage.setItem(this.SESSION_KEY, JSON.stringify(session)); return session.id;} } catch (error) { console.warn('Invalid session data, creating new session');} } const newSession = { id: this.generateUUID(), startTime: Date.now(), lastActivity: Date.now() }; sessionStorage.setItem(this.SESSION_KEY, JSON.stringify(newSession)); return newSession.id;}, getSessionInfo: function() { const sessionData = sessionStorage.getItem(this.SESSION_KEY); if (sessionData) { try { return JSON.parse(sessionData);} catch (error) { return null;} } return null;}, invalidateSession: function() { sessionStorage.removeItem(this.SESSION_KEY);} }; console.log('🆔 IdGenerator module loaded');})(window); (function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.TrafficDataDetector = { ATTRIBUTION_KEY: 'inf_attribution', socialMediaSources: { 'facebook.com': 'Facebook', 'fb.com': 'Facebook', 'm.facebook.com': 'Facebook', 'instagram.com': 'Instagram', 'twitter.com': 'Twitter', 'x.com': 'Twitter', 't.co': 'Twitter', 'linkedin.com': 'LinkedIn', 'youtube.com': 'YouTube', 'youtu.be': 'YouTube', 'tiktok.com': 'TikTok', 'pinterest.com': 'Pinterest', 'pin.it': 'Pinterest', 'snapchat.com': 'Snapchat', 'reddit.com': 'Reddit', 'whatsapp.com': 'WhatsApp', 'telegram.org': 'Telegram', 't.me': 'Telegram', 'discord.com': 'Discord', 'twitch.tv': 'Twitch' }, searchEngines: { 'google.': 'Google', 'bing.com': 'Bing', 'yahoo.com': 'Yahoo', 'duckduckgo.com': 'DuckDuckGo', 'yandex.': 'Yandex', 'baidu.com': 'Baidu' }, cachedTrafficData: null, getUtmParams: () => { const urlParams = new URLSearchParams(window.location.search); return { utm_source: urlParams.get('utm_source'), utm_medium: urlParams.get('utm_medium'), utm_campaign: urlParams.get('utm_campaign'), utm_term: urlParams.get('utm_term'), utm_content: urlParams.get('utm_content') };}, getAffiliateInfo: () => { const urlParams = new URLSearchParams(window.location.search); return { affiliate_id: urlParams.get('aff') || urlParams.get('affiliate') || urlParams.get('ref'), referral_code: urlParams.get('referral') || urlParams.get('promo'), partner_id: urlParams.get('partner') || urlParams.get('pid'), influencer_code: urlParams.get('influencer') || urlParams.get('inf'), discount_code: urlParams.get('discount') || urlParams.get('coupon') };}, getTrafficSource() { const referrer = document.referrer.toLowerCase(); if (!referrer) { return { source_type: 'direct', source_name: 'Direct Traffic', referrer_domain: null };} try { const referrerUrl = new URL(document.referrer); const domain = referrerUrl.hostname.toLowerCase(); for (const [key, name] of Object.entries(this.socialMediaSources)) { if (domain.includes(key)) { return { source_type: 'social', source_name: name, referrer_domain: domain, referrer_url: document.referrer };} } for (const [key, name] of Object.entries(this.searchEngines)) { if (domain.includes(key)) { return { source_type: 'search', source_name: name, referrer_domain: domain, referrer_url: document.referrer, search_query: referrerUrl.searchParams.get('q') || referrerUrl.searchParams.get('query') || referrerUrl.searchParams.get('search') };} } if (domain.includes('mail') || domain.includes('email') || referrer.includes('newsletter') || referrer.includes('campaign')) { return { source_type: 'email', source_name: 'Email Marketing', referrer_domain: domain, referrer_url: document.referrer };} return { source_type: 'referral', source_name: domain, referrer_domain: domain, referrer_url: document.referrer };} catch (error) { return { source_type: 'unknown', source_name: 'Unknown', referrer_domain: null, error: error.message };} }, getFacebookCampaignInfo: () => { const urlParams = new URLSearchParams(window.location.search); return { fbclid: urlParams.get('fbclid'), fb_action_ids: urlParams.get('fb_action_ids'), fb_action_types: urlParams.get('fb_action_types'), fb_source: urlParams.get('fb_source') };}, getGoogleCampaignInfo: () => { const urlParams = new URLSearchParams(window.location.search); return { gclid: urlParams.get('gclid'), gclsrc: urlParams.get('gclsrc'), dclid: urlParams.get('dclid'), wbraid: urlParams.get('wbraid'), gbraid: urlParams.get('gbraid') };}, getTrafficData() { if (this.cachedTrafficData) { return this.cachedTrafficData;} const utmParams = this.getUtmParams(); const affiliateInfo = this.getAffiliateInfo(); const trafficSource = this.getTrafficSource(); const facebookInfo = this.getFacebookCampaignInfo(); const googleInfo = this.getGoogleCampaignInfo(); let trafficData = { utm_data: utmParams, affiliate_data: affiliateInfo, traffic_source: trafficSource, facebook_data: facebookInfo, google_data: googleInfo, landing_page: window.location.pathname, full_url: window.location.href, user_agent: navigator.userAgent, timestamp: Date.now() }; this.cachedTrafficData = trafficData; return trafficData;} }; console.log('🎯 TrafficDataDetector module loaded');})(window); (function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.DeviceFingerprint = { cachedFingerprint: null, generate: function() { if (this.cachedFingerprint) { return this.cachedFingerprint;} const screen = window.screen; const fingerprint = { user_agent: navigator.userAgent, language: navigator.language, platform: navigator.platform, screen_resolution: `${screen.width}x${screen.height}`, screen_color_depth: screen.colorDepth, timezone_offset: new Date().getTimezoneOffset(), has_local_storage: !!window.localStorage, has_session_storage: !!window.sessionStorage, has_cookies: navigator.cookieEnabled, viewport: this.getViewportInfo() }; this.cachedFingerprint = fingerprint; return fingerprint;}, getViewportInfo: function() { return { width: window.innerWidth || document.documentElement.clientWidth, height: window.innerHeight || document.documentElement.clientHeight, device_pixel_ratio: window.devicePixelRatio || 1 };}, clearCache: function() { this.cachedFingerprint = null;} }; console.log('🔍 DeviceFingerprint module loaded');})(window); (function(window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.EventQueue = { queue: [], flushTimer: null, isOnline: navigator.onLine, FAILED_EVENTS_KEY: 'inf_failed_events', init: function() { this.setupNetworkListeners(); this.retryFailedEvents();}, setupNetworkListeners: function() { const self = this; window.addEventListener('online', function() { self.isOnline = true; self.retryFailedEvents(); if (self.queue.length > 0) { self.flush();} }); window.addEventListener('offline', function() { self.isOnline = false;});}, add: function(event) { this.queue.push(event); const config = window.CommerceTracker.Config; const batchSize = config.get('batchSize'); if (this.queue.length >= batchSize) { this.flush();} else { this.scheduleFlush();} }, scheduleFlush: function() { if (this.flushTimer) { clearTimeout(this.flushTimer);} const config = window.CommerceTracker.Config; const batchTimeout = config.get('batchTimeout'); this.flushTimer = setTimeout(() => { this.flush();}, batchTimeout);}, flush: function() { if (this.queue.length === 0) return Promise.resolve(); const config = window.CommerceTracker.Config; const apiEndpoint = config.get('apiEndpoint'); const projectId = config.get('projectId'); if (!apiEndpoint) { console.warn('Influencer Tracker: API endpoint not configured'); return Promise.reject(new Error('API endpoint not configured'));} const events = this.queue.splice(0, config.get('batchSize')); const payload = { project_id: projectId, events: events, version: config.get('version'), timestamp: Date.now() }; return this.sendEvents(payload, events);}, sendEvents: function(payload, originalEvents) { const config = window.CommerceTracker.Config; return fetch(config.get('apiEndpoint'), { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(payload) }) .then(response => { if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`);} return response.json();}) .catch(error => { console.warn('Influencer Tracker: Failed to send events', error); this.saveFailedEvents(originalEvents); throw error;});}, saveFailedEvents: function(events) { try { const stored = JSON.parse(localStorage.getItem(this.FAILED_EVENTS_KEY) || '[]'); stored.push(...events); const limited = stored.slice(-100); localStorage.setItem(this.FAILED_EVENTS_KEY, JSON.stringify(limited));} catch (error) { console.warn('Failed to save failed events:', error);} }, retryFailedEvents: function() { if (!this.isOnline) return; try { const failedEvents = JSON.parse(localStorage.getItem(this.FAILED_EVENTS_KEY) || '[]'); if (failedEvents.length > 0) { console.log(`Retrying ${failedEvents.length} failed events`); this.queue.unshift(...failedEvents); localStorage.removeItem(this.FAILED_EVENTS_KEY); this.flush();} } catch (error) { console.warn('Error retrying failed events:', error);} }, getQueueSize: function() { return this.queue.length;}, clear: function() { this.queue = []; if (this.flushTimer) { clearTimeout(this.flushTimer); this.flushTimer = null;} }, forceFlush: function() { if (this.flushTimer) { clearTimeout(this.flushTimer); this.flushTimer = null;} return this.flush();} }; console.log('📤 EventQueue module loaded');})(window); (function() { (function (window) { 'use strict'; window.CommerceTracker = window.CommerceTracker || {}; window.CommerceTracker.ShopifyDataExtractors = { extractProductData(product) { if (!product) return null; return { id: product.id, title: product.title, handle: product.handle, vendor: product.vendor, type: product.type, price: product.price ? parseFloat(product.price.amount) : null, currency: product.price ? product.price.currencyCode : null, available: product.available, tags: product.tags || [], created_at: product.createdAt, updated_at: product.updatedAt };}, extractVariantData(variant) { if (!variant) return null; return { id: variant.id, title: variant.title, price: parseFloat(variant.price.amount), currency: variant.price.currencyCode, compare_at_price: variant.compareAtPrice ? parseFloat(variant.compareAtPrice.amount) : null, available: variant.available, inventory_quantity: variant.inventoryQuantity, sku: variant.sku, barcode: variant.barcode, weight: variant.weight, weight_unit: variant.weightUnit, product: this.extractProductData(variant.product) };}, extractLineItems(lineItems) { if (!lineItems) return []; return lineItems.map(item => ({ id: item.id, quantity: item.quantity, title: item.title, variant: this.extractVariantData(item.variant), line_price: parseFloat(item.variant.price.amount) * item.quantity, discounts: item.discounts || [], properties: item.properties || {} }));} }; console.log('📦 Shopify Data Extractors module loaded');})(window);})(); (function(window) { 'use strict'; const Config = window.CommerceTracker.Config; const ConsentManager = window.CommerceTracker.ConsentManager; const IdGenerator = window.CommerceTracker.IdGenerator; const TrafficDataDetector = window.CommerceTracker.TrafficDataDetector; const DeviceFingerprint = window.CommerceTracker.DeviceFingerprint; const EventQueue = window.CommerceTracker.EventQueue; const Utils = window.CommerceTracker.Utils; window.CommerceTracker.Core = { initialized: false, startTime: Date.now(), platform: 'generic', adapter: null, init: function(options = {}) { if (this.initialized) { console.warn('Influencer Tracker already initialized'); return;} Config.update(options); if (!Config.isValid()) { console.warn('Influencer Tracker: Invalid configuration - missing apiEndpoint or projectId'); return;} EventQueue.init(); this.platform = this.detectPlatform(); console.log(`🎯 Plataforma detectada: ${this.platform}`); this.adapter = this.loadAdapter(this.platform); console.log('🎯 Consentimento: ', ConsentManager.checkConsent()); if (Config.get('enableConsentCheck') && !ConsentManager.checkConsent()) { ConsentManager.waitForConsent(() => this.startTracking()); return;} this.startTracking();}, detectPlatform: function() { if (Config.get('platform') === 'shopify') { return 'shopify';} return 'generic';}, loadAdapter: function(platform) { const adapterName = `${platform}Adapter`; return window[adapterName] || null;}, startTracking: function() { this.initialized = true; let sendTrafficData = false; if (!sessionStorage.getItem("passedFirstPageView")) { sessionStorage.setItem("passedFirstPageView", "true"); sendTrafficData = true;} this.track('page_view', { page_title: document.title, referrer: document.referrer, device_type: Utils.getDeviceType(), ...(sendTrafficData && { viewport: DeviceFingerprint.generate().viewport, traffic_attribution: TrafficDataDetector.getTrafficData() }) }); this.setupUniversalTracking(); if (this.adapter && this.adapter.init) { this.adapter.init();} window.addEventListener('beforeunload', () => { EventQueue.forceFlush();}); document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'hidden') { EventQueue.forceFlush();} }); console.log('🎯 Influencer Tracker: Inicializado com sucesso');}, track: function(eventType, properties = {}) { if (!this.initialized) { console.warn('Tracker not initialized'); return;} const event = { event_id: IdGenerator.generateUUID(), event_type: eventType, timestamp: Date.now(), user_id: IdGenerator.getUserId(), session_id: IdGenerator.getSessionId(), page_url: Utils.getCleanPageUrl(), device_fingerprint: DeviceFingerprint.generate(), platform: this.platform, properties: Utils.deepMerge({}, properties) }; console.log('📊 Evento rastreado:', eventType, properties); EventQueue.add(event);}, setupUniversalTracking: function() { let maxScroll = 0; window.addEventListener('scroll', Utils.throttle(() => { const scrollPercent = Utils.getScrollPercentage(); if (scrollPercent > maxScroll) { maxScroll = scrollPercent; if ([25, 50, 75, 90].includes(scrollPercent)) { this.track('scroll_milestone', { scroll_percent: scrollPercent, max_scroll: maxScroll });} } }, 1000)); let timeOnPage = 0; const timeInterval = setInterval(() => { timeOnPage += 10; if ([30, 60, 120, 300].includes(timeOnPage)) { this.track('time_milestone', { seconds_on_page: timeOnPage, session_duration: Date.now() - this.startTime });} }, 10000); window.addEventListener('beforeunload', () => { clearInterval(timeInterval);}); this.setupExitTracking();}, setupExitTracking: function() { let exitTracked = false; document.addEventListener('mouseleave', (e) => { if (e.clientY <= 0 && !exitTracked) { exitTracked = true; this.track('exit_intent', { time_on_page: Date.now() - this.startTime, scroll_percent: Utils.getScrollPercentage(), page_url: window.location.href });} });}, getInfo: function() { return { initialized: this.initialized, platform: this.platform, version: Config.get('version'), userId: IdGenerator.getUserId(), sessionId: IdGenerator.getSessionId(), queueSize: EventQueue.getQueueSize(), hasAttribution: TrafficDataDetector.hasActiveAttribution() };} }; console.log('🎯 TrackerCore module loaded');})(window);